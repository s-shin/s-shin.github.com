// Generated by CoffeeScript 1.3.3
(function() {
  var checkSupportedExt, checkSupportedFileName, checkType, escape, getExt, lines2text, preprocess, readFile, supportedExts, supportedFileNames, text2lines, trim, untabify;

  supportedExts = {
    cpp: ["c", "cc", "cpp", "cxx", "cyc", "m"],
    cs: ["cs"],
    java: ["java"],
    py: ["py", "cv"],
    rb: ["rb"],
    pl: ["pl", "pm", "perl"],
    sh: ["sh", "bsh", "csh"],
    xml: ["htm", "html", "mxml", "xhtml", "xml", "xsl"],
    js: ["js"],
    json: ["json"],
    coffee: ["coffee"],
    apollo: ["apollo", "agc", "aea"],
    clj: ["clj"],
    css: ["css"],
    ngo: ["go"],
    hs: ["hs"],
    lisp: ["cl", "el", "lisp", "scm"],
    lua: ["lua"],
    ml: ["fs", "ml"],
    n: ["n", "nemerle"],
    proto: ["proto"],
    scala: ["scala"],
    sql: ["sql"],
    tex: ["latex", "tex"],
    vb: ["vb", "vbs"],
    vhdl: ["vhdl", "vhd"],
    wiki: ["wiki.meta"],
    xq: ["xq", "xquery"],
    yaml: ["yaml", "yml"]
  };

  getExt = function(name) {
    var m;
    m = name.match(/^.*[.](\w+)$/);
    if (m) {
      return m[1];
    }
    return null;
  };

  checkSupportedExt = function(name) {
    var ext, k, v;
    ext = getExt(name);
    if (ext) {
      for (k in supportedExts) {
        v = supportedExts[k];
        if (v.indexOf(ext) !== -1) {
          return k;
        }
      }
    }
    return null;
  };

  supportedFileNames = {
    makefile: ["Makefile"]
  };

  checkSupportedFileName = function(name) {
    var k, v;
    for (k in supportedFileNames) {
      v = supportedFileNames[k];
      if (v.indexOf(name) !== -1) {
        return k;
      }
    }
    return null;
  };

  checkType = function(name) {
    var t;
    t = checkSupportedExt(name);
    if (t) {
      return t;
    }
    t = checkSupportedFileName(name);
    if (t) {
      return t;
    }
    return null;
  };

  readFile = function(file, fn) {
    var reader;
    reader = new FileReader;
    reader.onload = function() {
      return fn(reader.result);
    };
    return reader.readAsText(file);
  };

  text2lines = function(text) {
    return text.split(/\r?\n/);
  };

  lines2text = function(lines) {
    return lines.join("\n");
  };

  trim = function(lines) {
    while (lines.length > 0 && lines[0].length === 0) {
      lines.shift();
    }
    while (lines.length > 0 && lines[lines.length - 1].length === 0) {
      lines.pop();
    }
    return lines;
  };

  untabify = function(lines, width) {
    var i, line, m, ret, spaces, t, _i, _j, _k, _len, _ref;
    if (typeof width !== "number" || width < 0) {
      return lines;
    }
    spaces = "";
    for (i = _i = 1; 1 <= width ? _i <= width : _i >= width; i = 1 <= width ? ++_i : --_i) {
      spaces += " ";
    }
    ret = [];
    for (_j = 0, _len = lines.length; _j < _len; _j++) {
      line = lines[_j];
      t = "";
      m = line.match(/^(\t+)([^\t].*)$/);
      if (m) {
        for (_k = 1, _ref = m[1].length; 1 <= _ref ? _k <= _ref : _k >= _ref; 1 <= _ref ? _k++ : _k--) {
          t += spaces;
        }
        t += m[2];
      } else {
        t = line;
      }
      ret.push(t);
    }
    return ret;
  };

  escape = function(code) {
    return $("<pre>").text(code).html();
  };

  preprocess = function(code, tabwidth) {
    if (tabwidth == null) {
      tabwidth = null;
    }
    return lines2text(untabify(trim(text2lines(escape(code))), tabwidth));
  };

  $(function() {
    var body, content, info, print, target;
    content = $("#content");
    body = $("body");
    target = content.find("pre code.prettyprint");
    print = function(code, type) {
      var t;
      if (type === "makefile") {
        t = preprocess(code);
      } else {
        t = preprocess(code, 4);
      }
      return target.html(PR.prettyPrintOne(t, type));
    };
    body.bind("drop", function(jqe) {
      var e, file, type;
      jqe.preventDefault();
      e = jqe.originalEvent;
      file = e.dataTransfer.files[0];
      type = checkType(file.name);
      if (type) {
        readFile(file, function(r) {
          return print(r, type);
        });
        return info.ddhere.hide();
      }
    });
    return info = {
      ddhere: {
        obj: $("#content .info .ddhere"),
        show: function() {
          return this.obj.fadeIn(100);
        },
        hide: function() {
          return this.obj.fadeOut(500);
        },
        over: function() {
          return this.obj.css("color", "red");
        },
        out: function() {
          return this.obj.css("color", "black");
        }
      }
    };
  });

}).call(this);
