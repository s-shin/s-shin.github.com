// Generated by CoffeeScript 1.3.3
(function() {
  var DIRECTION, Field, Food, Position, Snake, SnakeBody, State, find, rand,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  rand = function(x) {
    return Math.floor(Math.random() * x);
  };

  find = function(arr, func) {
    var v, _i, _len;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      if (func(v)) {
        return v;
      }
    }
  };

  DIRECTION = {
    UP: 1,
    RIGHT: 2,
    DOWN: 3,
    LEFT: 4
  };

  Position = (function() {

    function Position(x, y) {
      this.x = x;
      this.y = y;
    }

    Position.prototype.equal = function(p) {
      return this.x === p.x && this.y === p.y;
    };

    return Position;

  })();

  SnakeBody = (function(_super) {

    __extends(SnakeBody, _super);

    function SnakeBody(direction, x, y) {
      this.direction = direction;
      this.x = x;
      this.y = y;
    }

    SnakeBody.prototype.goTo = function(direction, isReverse) {
      var s;
      s = isReverse ? -1 : 1;
      switch (direction) {
        case DIRECTION.UP:
          return this.y -= s;
        case DIRECTION.RIGHT:
          return this.x += s;
        case DIRECTION.DOWN:
          return this.y += s;
        case DIRECTION.LEFT:
          return this.x -= s;
      }
    };

    SnakeBody.prototype.update = function() {
      return this.goTo(this.direction);
    };

    return SnakeBody;

  })(Position);

  Snake = (function() {

    function Snake(direction, x, y) {
      this.body = [new SnakeBody(direction, x, y)];
    }

    Snake.prototype.head = function() {
      return this.body[0];
    };

    Snake.prototype.tail = function() {
      return this.body[this.body.length - 1];
    };

    Snake.prototype.direct = function(direction) {
      return this.head().direction = direction;
    };

    Snake.prototype.eat = function() {
      var t;
      t = this.tail();
      t = new SnakeBody(t.direction, t.x, t.y);
      t.goTo(t.direction, true);
      return this.body.push(t);
    };

    Snake.prototype.update = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.body.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.body[i].update());
      }
      return _results;
    };

    return Snake;

  })();

  Food = (function(_super) {

    __extends(Food, _super);

    function Food(width, height) {
      this.width = width;
      this.height = height;
      this.random();
    }

    Food.prototype.random = function() {
      this.x = rand(this.width);
      return this.y = rand(this.height);
    };

    return Food;

  })(Position);

  Field = (function() {

    function Field(width, height, state, isWall) {
      this.width = width;
      this.height = height;
      this.state = state;
      this.isWall = isWall != null ? isWall : false;
      this.snake = new Snake(DIRECTION.RIGHT, 0, 0);
      this.food = new Food(this.width, this.height);
    }

    Field.prototype.setFood = function() {
      var food, _results;
      food = this.food;
      _results = [];
      while ((find(this.snake.body, function(b) {
          return b.equal(food);
        })) != null) {
        _results.push(food.random());
      }
      return _results;
    };

    Field.prototype.isOutside = function(p) {
      return p.x >= this.width || p.x < 0 || p.y >= this.height || p.y < 0;
    };

    Field.prototype.update = function() {
      var b, body, head, i, _i, _j, _len, _ref;
      this.snake.update();
      body = this.snake.body;
      head = this.snake.head();
      for (_i = 0, _len = body.length; _i < _len; _i++) {
        b = body[_i];
        if (this.isOutside(b)) {
          if (this.isWall) {
            this.state.end();
            return;
          }
          b.x = (b.x + this.width) % this.width;
          b.y = (b.y + this.height) % this.height;
        }
        if (b !== head && head.equal(b)) {
          this.state.end();
          return;
        }
      }
      if (body.length > 1) {
        for (i = _j = _ref = body.length - 1; _ref <= 1 ? _j <= 1 : _j >= 1; i = _ref <= 1 ? ++_j : --_j) {
          body[i].direction = body[i - 1].direction;
        }
      }
      if (head.equal(this.food)) {
        this.snake.eat();
        return this.setFood();
      }
    };

    return Field;

  })();

  State = (function() {

    function State(event) {
      this.event = event != null ? event : {};
      this.isEnd = false;
    }

    State.prototype.end = function() {
      var _base;
      this.isEnd = true;
      return typeof (_base = this.event).onEnd === "function" ? _base.onEnd() : void 0;
    };

    return State;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).logic = {
    Snake: Snake,
    Food: Food,
    Field: Field,
    State: State,
    DIRECTION: DIRECTION
  };

}).call(this);
